 分布式系统下生成唯一主键 primary key
1、使用时间戳
2、使用机房id
3、使用主机ip
4、使用随机数
//为了效率，牺牲了数据的强一致性（效率vs一致性vs容错）
-----------------
> 重定向（把标准输出进行了重定向）
2> 标准错误重定向
< 标准输入重定向
-----------------
使用代码MySQL C API 来完成数据库操作
.so 动态链接库
MYSQL API 的核心思想：拼SQL语句
-----------------
设计前后端的交互API
基于HTTP协议进行扩展，创建自定制协议
一、博客管理
1、新增博客
【 传统的API的设计方式：使用query_string来进行传递信息；
  
  restful 风格的API设计方式：使用不同的HTTP的方法来表达不同的语义；
 {
 「 a)使用POST方法表示新增
  b)使用GET方法表示查看
  c)使用PUT方法表示修改
  d)使用DELETE方法表示删除」
  使用path表示要操作的资源
  使用json来组织body中的数据
 }                      
 】
 -----------------
 restful:
 POST/blog
 {
 	title:=====,
 	content:=====,
 	create_time:=====,
 	tag_id:=====,
 }
 HTTP/1.1 200OK
 {
 	ok:true
 	reason:""
 }
 -----------------
2、获取博客列表  //用于展示博客列表
GET /blog   获取所有
GET /blog ==>tag_id==1  按照标签筛选

HTTP/1.1 200 OK
[
{
	blog_id:1,
	title:"我的第一"，
	create_time:"2020/02/27",
	tag_id:1
}
{
	.........
	.........
	.........
	.........
}
]
3、获取某个博客的详细内容  //用于展示博客详情内容
GET /blog/:blog_id   类似于/blog/10
HTTP/1.1 200 OK
{
	"blog_id":1,
	"title":"我的第一篇博客",
	"content":"博客正文",
	"create_time":"2020/02/28"
}
4、修改博客
PUT /blog/:blog_id
{
	title:"修改之后的标题",
	content:"修改之后的正文",
	tag_id:"修改之后的tag_id"
}
5、删除博客
DELETE /blog/:blog_id	
HTTP/1.1 200 OK
{
	ok:true
}

二、标签管理
1、新增标签
POST /tag
{
	"tag_name":"新增的标签名"
}
HTTP/1.1 200 OK
{
	ok:true
}
2、删除标签
DELETE /tag/:tag_id
HTTP/1.1 200 OK
{
	ok:true
}
3、查看所有标签
GET /tag
HTTP/1.1 200 OK
{
	{
		tag_id:1,
		tag_name:C++
	}
	{
		........
		........
		........
	}
}


正式编码
1、数据库
2、HTTP服务端
3、网页客户端




//Python 世界中Djangoyouweb开发框架，一键生成类似于上述的数据库代码

MVC:
Model:数据相关的存储和操作
View：界面相关的操作
Controller：核心业务逻辑（把V和M串到一起）